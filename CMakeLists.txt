cmake_minimum_required(VERSION 2.8.3)

project(mml)

# define a macro that helps defining an option
macro(mml_set_option var default type docstring)
    if(NOT DEFINED ${var})
        set(${var} ${default})
    endif()
    set(${var} ${${var}} CACHE ${type} ${docstring} FORCE)
endmacro()

if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    set(MML_OS_WINDOWS 1)
    # detect the architecture (note: this test won't work for cross-compilation)
    include(CheckTypeSize)
    check_type_size(void* SIZEOF_VOID_PTR)
    if(${SIZEOF_VOID_PTR} STREQUAL "4")
        set(ARCH_32BITS 1)
    elseif(${SIZEOF_VOID_PTR} STREQUAL "8")
        set(ARCH_64BITS 1)
    else()
        message(FATAL_ERROR "Unsupported architecture")
        return()
    endif()
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
    set(MML_OS_UNIX 1)
    if(ANDROID)
        set(MML_OS_ANDROID 1)
    else()
        set(MML_OS_LINUX 1)
    endif()
elseif(CMAKE_SYSTEM_NAME MATCHES "^k?FreeBSD$")
    set(MML_OS_FREEBSD 1)
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    if(IOS)
        set(MML_OS_IOS 1)

        # set the target framework and platforms
        set(CMAKE_OSX_SYSROOT "iphoneos")
        set(CMAKE_OSX_ARCHITECTURES "armv6;armv7;i386")
        set(CMAKE_XCODE_EFFECTIVE_PLATFORMS "-iphoneos;-iphonesimulator")

        # help the compiler detection script below
        set(CMAKE_COMPILER_IS_GNUCXX 1)
    else()
        set(MML_OS_MACOSX 1)

        # detect OS X version. (use '/usr/bin/sw_vers -productVersion' to extract V from '10.V.x'.)
        EXEC_PROGRAM(/usr/bin/sw_vers ARGS -productVersion OUTPUT_VARIABLE MACOSX_VERSION_RAW)
        STRING(REGEX REPLACE "10\\.([0-9]+).*" "\\1" MACOSX_VERSION "${MACOSX_VERSION_RAW}")
        if(${MACOSX_VERSION} LESS 7)
            message(FATAL_ERROR "Unsupported version of OS X: ${MACOSX_VERSION_RAW}")
            return()
        endif()
    endif()
elseif(${CMAKE_SYSTEM_NAME} STREQUAL "Android")
    set(MML_OS_ANDROID 1)
else()
    message(FATAL_ERROR "Unsupported operating system or environment")
    return()
endif()

# add an option for choosing the build type (shared or static)
#if(NOT (MML_OS_IOS OR MML_OS_ANDROID))
#    mml_set_option(BUILD_SHARED_LIBS TRUE BOOL "TRUE to build MML as shared libraries, FALSE to build it as static libraries")
#else()
    if(MML_OS_IOS)
        set(BUILD_SHARED_LIBS FALSE)
#    elseif(MML_OS_ANDROID)
#        set(BUILD_SHARED_LIBS TRUE)
    endif()
#endif()

mml_set_option(MML_BUILD_WINDOW TRUE BOOL "TRUE to build mml's Window module.")
# Visual C++: remove warnings regarding SL security and algorithms on pointers
if(MML_COMPILER_MSVC)
    # add an option to choose whether PDB debug symbols should be generated (defaults to true when possible)
    if(CMAKE_VERSION VERSION_LESS 3.1)
        mml_set_option(MML_GENERATE_PDB FALSE BOOL "True to generate PDB debug symbols, FALSE otherwise. Requires CMake 3.1.")
        if(MML_GENERATE_PDB)
            message(FATAL_ERROR "Generation of PDB files (MML_GENERATE_PDB) requires at least CMake 3.1.0")
        endif()
    else()
        mml_set_option(MML_GENERATE_PDB TRUE BOOL "True to generate PDB debug symbols, FALSE otherwise. Requires CMake 3.1.")
    endif()

    add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_WARNINGS)
endif()

# add the MML header path
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
add_subdirectory(src/mml)